//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class UserClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAllUsers(): Promise<User[]> {
        let url_ = this.baseUrl + "/User";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllUsers(_response);
        });
    }

    protected processGetAllUsers(response: Response): Promise<User[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as User[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User[]>(null as any);
    }
}

export interface User {
    username?: string | undefined;
    oib: number;
    firstName: string;
    lastName: string;
    photo: string;
    phoneNumber: string;
    email: string;
    password: string;
    roleId: number;
    confirmed: boolean;
    role: Role;
    areas: Area[];
    blocks: Block[];
    comments: Comment[];
    operations: Operation[];
}

export interface Role {
    id: number;
    name: string;
    users: User[];
}

export interface Area {
    id: number;
    createdAt: Date;
    closedAt?: Date | undefined;
    updatedLastByOib: number;
    updatedLastByOibNavigation: User;
    block?: Block | undefined;
    building?: Building | undefined;
    region?: Region | undefined;
    points: Point[];
}

export interface Block {
    areaId: number;
    status: string;
    regionId: number;
    activeForOib?: number | undefined;
    activeForOibNavigation?: User | undefined;
    area: Area;
    region: Region;
    buildings: Building[];
}

export interface Region {
    areaId: number;
    operationId: number;
    area: Area;
    operation: Operation;
    blocks: Block[];
}

export interface Operation {
    id: number;
    status: string;
    leaderOib: number;
    leaderOibNavigation: User;
    regions: Region[];
}

export interface Building {
    areaId: number;
    blockId: number;
    status: string;
    area: Area;
    block: Block;
}

export interface Point {
    id: number;
    latitude: number;
    longitude: number;
    areaId: number;
    orderNumber: number;
    area: Area;
}

export interface Comment {
    id: number;
    reportId: number;
    text: string;
    userOib?: number | undefined;
    report: MissingReport;
    userOibNavigation?: User | undefined;
}

export interface MissingReport {
    id: number;
    firstName: string;
    lastName: string;
    oib: number;
    photo: string;
    description?: string | undefined;
    reportedAt: Date;
    foundAt?: Date | undefined;
    comments: Comment[];
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}